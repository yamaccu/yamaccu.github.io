<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>/</id>
	<title />
	<link rel="self" href="/" />
	<rights>Copyright © 2021</rights>
	<updated>2021-08-18T15:04:11Z</updated>
	<entry>
		<id>/posts/20210818-micropython-repl</id>
		<title>micropythonにreplでアクセス</title>
		<link href="/posts/20210818-micropython-repl" />
		<updated>2021-08-18T00:00:00Z</updated>
		<content>&lt;p&gt;micropythonにreplでアクセスする方法をまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="repl"&gt;replについて&lt;/h2&gt;
&lt;p&gt;repl：「Read（読み取り）、Eval（評価）、Print（印字）、Loop（ループ）」の頭字語。&lt;br /&gt;
一つずつコマンドを実行できる仕組みで、コマンドプロンプトのようなイメージです。&lt;br /&gt;
コードをテストするときに、コマンドを一つずつ実行できるので便利です。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;アクセス方法&lt;/h2&gt;
&lt;p&gt;デバイスのシリアルポートに、シリアル通信アプリ（teratermなど）で接続します。&lt;br /&gt;
通信速度は115200bps。&lt;br /&gt;
CTR+Cを二回で、mainで実行している処理を中止してreplで操作可能になります。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt; 
&lt;h2 id="section-1"&gt;コマンド&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;help()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ヘルプを表示します。&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;help('modules')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用可能なライブラリを表示します。&lt;/p&gt;
&lt;br&gt; 
&lt;pre&gt;&lt;code class="language-python"&gt;help(obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;調べたいobjectの説明を表示します&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;入力途中にTABキー
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入力候補の表示をしてくれます。&lt;br /&gt;
例えば、machine. でTabを押すとmachineの配下のクラスが表示されます。&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;dir()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インポート済みのファイルの情報を表示します。&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;sys.path.append('ディレクトリパス')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;import時に探索されるパスを追加します。&lt;/p&gt;
&lt;br&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;os.listdir()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;カレントディレクトリのファイルを表示します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="url"&gt;参考URL&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://micropython-docs-ja.readthedocs.io/ja/latest/esp8266/tutorial/repl.html"&gt;micropython公式&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;micropythonにreplでアクセスする方法をまとめています。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>/posts/20210817-statiq-getstarted</id>
		<title>Statiqでブログを書く</title>
		<link href="/posts/20210817-statiq-getstarted" />
		<updated>2021-08-17T00:00:00Z</updated>
		<content>&lt;p&gt;Statiqでブログを書く方法をまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;概要&lt;/h2&gt;
&lt;p&gt;StatiqはC#で書かれている静的サイトジェネレータで、MarkDownもしくはRazor構文で書かれたファイルをHTMLに変換してくれます。&lt;/p&gt;
&lt;p&gt;下記はStatiqで作成されているサイトのサンプルです（このサイトもStatiq製です。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.statiq.dev/"&gt;https://www.statiq.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnetfoundation.org/"&gt;https://dotnetfoundation.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずは&lt;a href="https://www.statiq.dev/web/"&gt;公式ページのQuick Start&lt;/a&gt;を一度やることをお勧めします。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-1"&gt;フォーマットのブログ形式への変更&lt;/h2&gt;
&lt;p&gt;初期状態では、ブログのフォーマットにはなっていません。&lt;br&gt;
Statiqでブログを作成するには、テーマを使用します。&lt;br&gt;
"theme"フォルダを作成して、中に&lt;a href="https://github.com/statiqdev/CleanBlog"&gt;githubのCleanBlogリポジトリ&lt;/a&gt;をクローンすると、自動で反映されてブログの形式になります。&lt;/p&gt;
&lt;p&gt;ブログデザインの変更は、theme-&amp;gt;input内の.cshtmlファイルを修正します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-2"&gt;記事の書き方&lt;/h2&gt;
&lt;p&gt;MarkDownで記述します。&lt;br&gt;
MarkDownの書き方は&lt;a href="/posts/20210816-markdown-tips"&gt;こちら&lt;/a&gt;にまとめてみました。&lt;/p&gt;
&lt;p&gt;記事を書いたら、"input"フォルダとその配下に"posts"フォルダを作成し、書いたmdファイルを保存します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-3"&gt;固定ページの書き方&lt;/h2&gt;
&lt;p&gt;プライバシーポリシーなどの固定ページを作成するには、inputフォルダ直下にMarkDownファイルを保存します。&lt;br&gt;
そうすると、ページ上部のタブにリンクが追加されます。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="html"&gt;HTMLへの変換&lt;/h2&gt;
&lt;p&gt;dotnet run を実行すると、outputフォルダにHTMLを出力してくれます。&lt;/p&gt;
&lt;p&gt;dotnet run -- preview を実行するとプレビューが見れます。&lt;br&gt;
ブラウザでhttp://localhost:5080 にアクセスします。&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;フォルダ構成&lt;br&gt;
├─ input ─┬─ () 　　 ←固定ページ　　&lt;br&gt;
│  　 　　 　└ posts　　←ブログ記事&lt;br&gt;
├─ theme&lt;br&gt;
├─ output　　　　　　←HTML出力&lt;br&gt;
└─ Program.cs&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="sitemap"&gt;sitemapの作成&lt;/h2&gt;
&lt;p&gt;dotnet runで、outputフォルダに自動出力されます。&lt;br&gt;
google serach consoleへの登録をお忘れずに。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="headscriptgoogle-analytics"&gt;HEADへのScript追加（google analyticsなど）&lt;/h2&gt;
&lt;p&gt;theme-&amp;gt;input内の_head.cshtmlファイルで、&amp;lt;HEAD&amp;gt;へのスクリプト追加ができます。&lt;br&gt;
google analyticsなどのスクリプトを追加したいときは、_head.cshtmlにスクリプトをコピペすると、全ページの&amp;lt;HEAD&amp;gt;に追加されます。&lt;/p&gt;
</content>
		<summary>&lt;p&gt;Statiqでブログを書く方法をまとめています。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>/posts/20210816-markdown-tips</id>
		<title>MarkDownの書き方</title>
		<link href="/posts/20210816-markdown-tips" />
		<updated>2021-08-17T00:00:00Z</updated>
		<content>&lt;p&gt;MarkDown記法のメモです。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;エディタ&lt;/h2&gt;
&lt;p&gt;VSCodeがお勧めです。
以下の拡張機能をインストールします。&lt;/p&gt;
&lt;p&gt;Markdown All in One&lt;/p&gt;
&lt;p&gt;（こちらの機能は、別記事にまとめる予定。）&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section-1"&gt;見出し&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# h1
## h2
### h3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-2"&gt;箇条書き&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- 箇条書き1
  - 箇条書き2
    - 箇条書き3
- 箇条書き1-2
- 箇条書き1-3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-3"&gt;コードブロック&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;```C#
codeblock
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-4"&gt;改行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-5"&gt;画像貼り付け&lt;/h2&gt;
&lt;h2 id="section-6"&gt;リンク&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[リンクテキスト](URL)
&lt;/code&gt;&lt;/pre&gt;
</content>
		<summary>&lt;p&gt;MarkDown記法のメモです。&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>/posts/20210815-blog-setting</id>
		<title>ブログを作ったらやること</title>
		<link href="/posts/20210815-blog-setting" />
		<updated>2021-08-15T00:00:00Z</updated>
		<content>&lt;p&gt;ブログを作ったら、最初にやることをまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="google-analytics"&gt;Google Analyticsの登録&lt;/h2&gt;
&lt;p&gt;HPへのアクセス状況が確認できるようになります。&lt;br /&gt;
登録が完了したら、トラッキングIDをHTMLの&amp;lt;HEAD&amp;gt;内に追記する必要があります。&lt;/p&gt;
&lt;p&gt;参考　&lt;a href="https://blog.siteanatomy.com/register-google-analytics/"&gt;Google Analytics登録方法&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="sitemap"&gt;sitemapの作成&lt;/h2&gt;
&lt;p&gt;Google検索にページをヒットさせ易くするためのファイルです。&lt;br /&gt;
作成後、Google Search Consoleに登録します。&lt;/p&gt;
&lt;p&gt;小規模HPには不要のようですが、一応作成しておくとよいです。&lt;br /&gt;
静的サイトジェネレータを使用している場合は、自動で出力してくれるものが多いようです。&lt;/p&gt;
&lt;p&gt;参考　&lt;a href="https://ferret-plus.com/curriculums/3580"&gt;サイトマップ作成方法&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="robots.txt"&gt;robots.txtの作成&lt;/h2&gt;
&lt;p&gt;sitemapへのリンクファイルです。&lt;br /&gt;
rootディレクトリに、「robots.txt」という名前のファイルを作成して、中身を以下のように記述します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;User-agent: *
    Disallow:
    
    Sitemap: https://xxxxxxxxx/sitemap.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="google-search-console-sitemap"&gt;Google Search Consoleの登録 / sitemapの登録&lt;/h2&gt;
&lt;p&gt;HPへの流入ルート、検索順位などSEO関連情報が確認できます。&lt;/p&gt;
&lt;p&gt;登録完了したら、サイトマップも登録します。&lt;br /&gt;
登録したては「サイトマップを読み込めませんでした」とエラーが出ますが、しばらく放置しておくと読み込んでくれるようです。&lt;/p&gt;
&lt;p&gt;⇒　3週間後に確認したら、読み込んでいました。&lt;/p&gt;
&lt;p&gt;参考　&lt;a href="http://faster-than-the-sol.blogspot.com/2020/10/github-listing.html"&gt;Google Serach Console登録方法&lt;/a&gt;&lt;/p&gt;
</content>
		<summary>&lt;p&gt;ブログを作ったら、最初にやることをまとめています。&lt;/p&gt;</summary>
	</entry>
</feed>