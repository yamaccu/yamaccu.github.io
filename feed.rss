<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://yamaccu.github.io/</link>
		<description />
		<copyright>Copyright © 2021</copyright>
		<pubDate>Fri, 20 Aug 2021 23:52:09 GMT</pubDate>
		<lastBuildDate>Fri, 20 Aug 2021 23:52:09 GMT</lastBuildDate>
		<item>
			<title>HTML div要素で図形を表示する</title>
			<link>https://yamaccu.github.io/posts/20210821-html-figure</link>
			<description>&lt;p&gt;HTMLのdiv要素を使って、ブラウザに図形を表示させる方法です。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210821-html-figure</guid>
			<pubDate>Sat, 21 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;HTMLのdiv要素を使って、ブラウザに図形を表示させる方法です。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;図形の作成方法&lt;/h2&gt;
&lt;p&gt;div要素のサイズを指定して、色を付けてあげれば図形になります。&lt;br /&gt;
試しに丸と四角を作ってみます。&lt;/p&gt;
&lt;br&gt;
&lt;p class="codepen" data-height="300" data-default-tab="result" data-slug-hash="KKWyajK" data-user="yy87750722" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/yy87750722/pen/KKWyajK"&gt;
  &lt;/a&gt; by やまっく (&lt;a href="https://codepen.io/yy87750722"&gt;&amp;#64;yy87750722&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;div class=&amp;quot;square&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;circle&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSS"&gt;.square {
  width: 50px;
  height: 50px;
  background: black;
}
.circle {
  width: 50px;
  height: 50px;
  background: black;
  border-radius: 50px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-1"&gt;複雑な形の図形&lt;/h2&gt;
&lt;p&gt;疑似要素（before / after）を使います。&lt;br /&gt;
疑似要素とは、HTMLの要素に対して、CSSで要素を追記できる方法です。&lt;br /&gt;
これを使えば、作った図形に2つまで図形の追加ができます。&lt;br /&gt;
（合計3つの図形を一つのDiv内に作れる）&lt;/p&gt;
&lt;p&gt;以下のようなマークを作ってみます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;時計マーク&lt;/li&gt;
&lt;li&gt;位置マーク&lt;/li&gt;
&lt;li&gt;虫眼鏡マーク&lt;/li&gt;
&lt;li&gt;スイッチマーク&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p class="codepen" data-height="300" data-default-tab="result" data-slug-hash="Vwboydb" data-user="yy87750722" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"&gt;
  &lt;span&gt;See the Pen &lt;a href="https://codepen.io/yy87750722/pen/Vwboydb"&gt;
  &lt;/a&gt; by やまっく (&lt;a href="https://codepen.io/yy87750722"&gt;&amp;#64;yy87750722&lt;/a&gt;)
  on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;■時計マーク&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;div class=&amp;quot;clock&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSS"&gt;.clock {
  display: inline-block;
  position: relative;
  width: 20px;
  height: 20px;
  border: 2px solid dimgray;
  border-radius: 20px;
}
.clock:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 7px;
  height: 9px;
  border-left: 2px solid dimgray;
  border-bottom: 2px solid dimgray;
  top: 2px;
  left: 6px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;■位置マーク&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;div class=&amp;quot;location&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSS"&gt;.location {
  display: inline-block;
  position: relative;
  width: 20px;
  height: 20px;
  border: 2px solid dimgray;
  border-radius: 30px 30px 30px 0;
  transform: rotate(-45deg);
}
.location:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 8px;
  height: 8px;
  background-color:dimgray;
  border: 2px solid dimgray;
  border-radius: 7px;
  top:4px;
  left:4px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;■虫眼鏡マーク&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;div class=&amp;quot;glass&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSS"&gt;.glass {
  display: inline-block;
  position: relative;
  width: 15px;
  height: 15px;
  border: 3px solid dimgray;
  border-radius: 20px;
}
glass:before {
  content: &amp;quot;&amp;quot;;
  position: absolute;
  width: 4px;
  height: 14px;
  background-color: dimgray;
  border-radius: 5px;
  top: 14px;
  left: 14px;
  transform: rotate(-35deg);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;■スイッチ&lt;/p&gt;
&lt;p&gt;HTML&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-HTML"&gt;&amp;lt;div class=&amp;quot;Switch&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-CSS"&gt;.Switch {
  position: relative;
  width: 20px;
  height: 42px;
  background: #ccc;
}
.Switch:before {
  content: '';
  position: absolute;
  width: 12px;
  height: 32px;
  left: 4px;
  top: 4px;
  background: #fff;
}
.Switch:after {
  content: '';
  position: absolute;
  width: 12px;
  height: 12px;
  left: 4px;
  top: 4px;
  background: #596;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="url"&gt;参考URL&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://qiita.com/yaegaki/items/a1e518d16be9b85479b4"&gt;qiita CSSで作図する&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://morobrand.net/mororeco/web/css/css-shape/"&gt;CSSでいろんなカタチを表現してみる&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://saruwakakun.com/html-css/basic/before-after"&gt;CSSの疑似要素とは？beforeとafterの使い方まとめ&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>python 仮想環境の作り方</title>
			<link>https://yamaccu.github.io/posts/20210820-python-pipenv</link>
			<description>&lt;p&gt;pythonでプログラミングする際の、仮想環境の構築についてまとめています。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210820-python-pipenv</guid>
			<pubDate>Fri, 20 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;pythonでプログラミングする際の、仮想環境の構築についてまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;仮想環境について&lt;/h2&gt;
&lt;p&gt;Pythonでプログラミングを行う際には、作るプログラムごとに仮想環境を構築します。&lt;/p&gt;
&lt;p&gt;理由は、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仮想環境ごとに必要なパッケージのバージョンをインストールできます。&lt;/li&gt;
&lt;li&gt;パッケージが複数のプログラムへ影響を与えるなどの、各プログラム間の干渉を回避できます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仮想環境の作成にはいくつか方法がありますが、ここではpipenvを使用します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt; 
&lt;h2 id="section-1"&gt;仮想環境の作成手順&lt;/h2&gt;
&lt;p&gt;コマンドプロンプトを使います。&lt;/p&gt;
&lt;p&gt;① pipenvをインストールします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install pipenv
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;②作業ディレクトリを作成します。&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;③作業ディレクトリに移動して、必要なパッケージをpipenvコマンドでインストールします。&lt;br /&gt;
（pipfileという設定ファイルが作成され、ここに仮想環境の情報が入ります。）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pipenv install xxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;④仮想環境を実行します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pipenv shell
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;⑤仮想環境を終了します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;※仮想環境に入らずにコマンド実行もできます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pipenv run xxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="hp"&gt;参考HP&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pipenv.pypa.io/en/latest/"&gt;pipenv公式&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Github pushまでの設定</title>
			<link>https://yamaccu.github.io/posts/20210819-git-push</link>
			<description>&lt;p&gt;githubのレポジトリにpushするまでの設定をまとめています。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210819-git-push</guid>
			<pubDate>Thu, 19 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;githubのレポジトリにpushするまでの設定をまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;認証&lt;/h2&gt;
&lt;p&gt;githubの認証には、&amp;quot;HTTP&amp;quot;と&amp;quot;SSH&amp;quot;の2種類あります。
ここでは、SSHの方法を記載します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-1"&gt;準備&lt;/h2&gt;
&lt;p&gt;以下が済んでいる必要があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gitのインストール&lt;/li&gt;
&lt;li&gt;githubへのサインアップ&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="ssh"&gt;端末のSSH公開鍵の設定&lt;/h2&gt;
&lt;p&gt;git bushでSSH公開鍵を生成します。
下記のコマンドで生成できます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;githubのページにサインインし、Setting =&amp;gt; SSH and GPG keys で生成したSSH鍵を登録します。&lt;/p&gt;
&lt;img src="../img/20210819-Git-push-1.png" width="85%"&gt;
&lt;br&gt;
&lt;br&gt;
 
&lt;h2 id="section-2"&gt;ローカル環境設定&lt;/h2&gt;
&lt;p&gt;git bushで下記のコマンドを実行して、ローカル環境設定を行います。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.name &amp;quot;ユーザー名&amp;quot;
git config --global user.email &amp;quot;メールアドレス&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ユーザー名、メールアドレスはgithubの登録情報と同じものです。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="github"&gt;githubのレポジトリをクローン&lt;/h2&gt;
&lt;p&gt;githubのページでレポジトリ作成して、作成したレポジトリをローカル環境にクローンします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone &amp;lt;アドレス&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;p&gt;このとき、アドレスはSSHのものにします。&lt;/p&gt;
&lt;img src="../img/20210819-Git-push-2.png" width="85%"&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="commitpush"&gt;commit＆push&lt;/h2&gt;
&lt;p&gt;ファイルの追加、修正をしたら、以下のコマンドでcommit＆pushします。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add &amp;lt;ファイル名&amp;gt;
git commit -m &amp;quot;コメント&amp;quot;
git push (-f) origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;※-fは強制プッシュなので取り扱い注意です&lt;/p&gt;
&lt;p&gt;※originの設定は、クローン時に自動で設定されます。&lt;/p&gt;
&lt;p&gt;※2020/10から、デフォルトブランチがmaster ⇒ main に変わりました。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>micropythonにreplでアクセス</title>
			<link>https://yamaccu.github.io/posts/20210818-micropython-repl</link>
			<description>&lt;p&gt;micropythonにreplでアクセスする方法をまとめています。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210818-micropython-repl</guid>
			<pubDate>Wed, 18 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;micropythonにreplでアクセスする方法をまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="repl"&gt;replについて&lt;/h2&gt;
&lt;p&gt;repl：「Read（読み取り）、Eval（評価）、Print（印字）、Loop（ループ）」の頭字語です。&lt;/p&gt;
&lt;p&gt;micropython上でコマンドを実行できる仕組みで、コマンドプロンプトのようなイメージです。&lt;br /&gt;
コードをテストするときに、コマンドを一つずつ実行できるので便利です。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;アクセス方法&lt;/h2&gt;
&lt;p&gt;デバイスのシリアルポートに、シリアル通信アプリ（teratermなど）で接続します。&lt;br /&gt;
通信速度は115200bpsです。&lt;br /&gt;
CTR+Cを二回で、mainで実行している処理を中止してreplで操作可能になります。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt; 
&lt;h2 id="section-1"&gt;コマンド&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;help()&lt;/td&gt;
&lt;td&gt;ヘルプを表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help('modules')&lt;/td&gt;
&lt;td&gt;使用可能なライブラリを表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help(obj)&lt;/td&gt;
&lt;td&gt;調べたいobjectの説明を表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dir()&lt;/td&gt;
&lt;td&gt;import済みのファイル情報の表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sys.path.append('パス')&lt;/td&gt;
&lt;td&gt;import時に探索されるパスを追加&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;os.listdir()&lt;/td&gt;
&lt;td&gt;カレントディレクトリのファイルを表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tabキー&lt;/td&gt;
&lt;td&gt;入力候補の表示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="url"&gt;参考URL&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://micropython-docs-ja.readthedocs.io/ja/latest/esp8266/tutorial/repl.html"&gt;micropython公式&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Statiqでブログを書く</title>
			<link>https://yamaccu.github.io/posts/20210817-statiq-getstarted</link>
			<description>&lt;p&gt;Statiqでブログを書く方法をまとめています。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210817-statiq-getstarted</guid>
			<pubDate>Tue, 17 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Statiqでブログを書く方法をまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;概要&lt;/h2&gt;
&lt;p&gt;StatiqはC#で書かれている静的サイトジェネレータで、MarkDownもしくはRazor構文で書かれたファイルをHTMLに変換してくれます。&lt;/p&gt;
&lt;p&gt;下記はStatiqで作成されているサイトのサンプルです（このサイトもStatiq製です。）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.statiq.dev/"&gt;https://www.statiq.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dotnetfoundation.org/"&gt;https://dotnetfoundation.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずは&lt;a href="https://www.statiq.dev/web/"&gt;公式ページのQuick Start&lt;/a&gt;を一度やることをお勧めします。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-1"&gt;フォーマットのブログ形式への変更&lt;/h2&gt;
&lt;p&gt;初期状態では、ブログのフォーマットにはなっていません。&lt;br&gt;
Statiqでブログを作成するには、テーマを使用します。&lt;br&gt;
"theme"フォルダを作成して、中に&lt;a href="https://github.com/statiqdev/CleanBlog"&gt;githubのCleanBlogリポジトリ&lt;/a&gt;をクローンすると、自動で反映されてブログの形式になります。&lt;/p&gt;
&lt;p&gt;ブログデザインの変更は、theme→input内の.cshtmlファイルを修正します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-2"&gt;記事の書き方&lt;/h2&gt;
&lt;p&gt;MarkDownで記述します。&lt;br&gt;
MarkDownの書き方は&lt;a href="https://yamaccu.github.io/posts/20210816-markdown-tips"&gt;こちら&lt;/a&gt;にまとめてみました。&lt;/p&gt;
&lt;p&gt;記事を書いたら、"input"フォルダとその配下に"posts"フォルダを作成し、書いたmdファイルを保存します。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-3"&gt;固定ページの書き方&lt;/h2&gt;
&lt;p&gt;プライバシーポリシーなどの固定ページを作成するには、inputフォルダ直下にMarkDownファイルを保存します。&lt;br&gt;
そうすると、ページ上部のタブにリンクが追加されます。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="section-4"&gt;設定&lt;/h2&gt;
&lt;p&gt;設定は設定ファイルで変えることができます。&lt;br&gt;
theme→settings.ymlが設定ファイルです。&lt;/p&gt;
&lt;p&gt;設定できる項目は、&lt;a href="https://www.statiq.dev/web/configuration/settings"&gt;公式HP&lt;/a&gt;を参照ください。&lt;br&gt;
設定例は、&lt;a href="https://github.com/statiqdev/statiqdev.github.io/blob/develop/settings.yml"&gt;こちら&lt;/a&gt;にあります。&lt;/p&gt;
&lt;p&gt;"Host"と"LinksUseHttps"を設定しないとSitemapが正しく出力されませんので、設定をおすすめします。&lt;br&gt;
（ここでちょっとはまりました）&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="html"&gt;HTMLへの変換&lt;/h2&gt;
&lt;p&gt;dotnet run を実行すると、outputフォルダにHTMLを出力してくれます。&lt;/p&gt;
&lt;p&gt;dotnet run -- preview を実行するとプレビューが見れます。&lt;br&gt;
ブラウザでhttp://localhost:5080 にアクセスします。&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;フォルダ構成&lt;br&gt;
├─ input ─┬─ () 　　 ←固定ページ　　&lt;br&gt;
│  　 　　 　└ posts　　←ブログ記事&lt;br&gt;
├─ theme&lt;br&gt;
├─ output　　　　　　←HTML出力&lt;br&gt;
├─ Program.cs&lt;br&gt;
└─ xxxx.csproj&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="sitemap"&gt;sitemapの作成&lt;/h2&gt;
&lt;p&gt;dotnet runで、outputフォルダに自動出力されます。&lt;br&gt;
google serach consoleへの登録をお忘れずに。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="headscriptgoogle-analytics"&gt;HEADへのScript追加（google analyticsなど）&lt;/h2&gt;
&lt;p&gt;theme→input内の_head.cshtmlファイルで、&amp;lt;HEAD&amp;gt;へのスクリプト追加ができます。&lt;br&gt;
google analyticsなどのスクリプトを追加したいときは、_head.cshtmlにスクリプトをコピペすると、全ページの&amp;lt;HEAD&amp;gt;に追加されます。&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>MarkDownの書き方</title>
			<link>https://yamaccu.github.io/posts/20210816-markdown-tips</link>
			<description>&lt;p&gt;MarkDown記法のメモです。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210816-markdown-tips</guid>
			<pubDate>Tue, 17 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;MarkDown記法のメモです。&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section"&gt;エディタ&lt;/h2&gt;
&lt;p&gt;VSCodeがお勧めです。
以下の拡張機能をインストールします。&lt;/p&gt;
&lt;p&gt;Markdown All in One&lt;/p&gt;
&lt;p&gt;（こちらの機能は、別記事にまとめる予定。）&lt;/p&gt;
&lt;br&gt;
&lt;h2 id="section-1"&gt;見出し&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# h1
## h2
### h3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-2"&gt;箇条書き&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;- 箇条書き1
  - 箇条書き2
    - 箇条書き3
- 箇条書き1-2
- 箇条書き1-3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-3"&gt;コードブロック&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;```C#
codeblock
```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-4"&gt;改行&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-5"&gt;リンク&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[リンクテキスト](URL)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-6"&gt;表&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;|  TH  |  TH  |
| ---- | ---- |
|  TD  |  TD  |
|  TD  |  TD  |
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="section-7"&gt;画像貼り付け&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;xxxx/xxxx.png&amp;quot; Style=&amp;quot;width:100%;max-width:500px;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>ブログを作ったらやること</title>
			<link>https://yamaccu.github.io/posts/20210815-blog-setting</link>
			<description>&lt;p&gt;ブログを作ったら、最初にやることをまとめています。&lt;/p&gt;</description>
			<guid>https://yamaccu.github.io/posts/20210815-blog-setting</guid>
			<pubDate>Sun, 15 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;ブログを作ったら、最初にやることをまとめています。&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="google-analytics"&gt;Google Analyticsの登録&lt;/h2&gt;
&lt;p&gt;HPへのアクセス状況が確認できるようになります。&lt;br /&gt;
登録が完了したら、トラッキングIDをHTMLの&amp;lt;HEAD&amp;gt;内に追記する必要があります。&lt;/p&gt;
&lt;p&gt;参考　&lt;a href="https://blog.siteanatomy.com/register-google-analytics/"&gt;Google Analytics登録方法&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="sitemap"&gt;sitemapの作成&lt;/h2&gt;
&lt;p&gt;Google検索にページをヒットさせ易くするためのファイルです。&lt;br /&gt;
作成後、Google Search Consoleに登録します。&lt;/p&gt;
&lt;p&gt;小規模HPには不要のようですが、一応作成しておくとよいです。&lt;br /&gt;
静的サイトジェネレータを使用している場合は、自動で出力してくれるものが多いようです。&lt;/p&gt;
&lt;p&gt;参考　&lt;a href="https://ferret-plus.com/curriculums/3580"&gt;サイトマップ作成方法&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="robots.txt"&gt;robots.txtの作成&lt;/h2&gt;
&lt;p&gt;sitemapへのリンクファイルです。&lt;br /&gt;
rootディレクトリに、「robots.txt」という名前のファイルを作成して、中身を以下のように記述します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;User-agent: *
    Disallow:
    
    Sitemap: https://xxxxxxxxx/sitemap.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id="google-search-console-sitemap"&gt;Google Search Consoleの登録 / sitemapの登録&lt;/h2&gt;
&lt;p&gt;HPへの流入ルート、検索順位などSEO関連情報が確認できます。&lt;/p&gt;
&lt;p&gt;登録完了したら、サイトマップも登録します。&lt;br /&gt;
登録したては「サイトマップを読み込めませんでした」とエラーが出ますが、しばらく放置しておくと読み込んでくれるようです。&lt;/p&gt;
&lt;p&gt;⇒　3週間後に確認したら、読み込んでいました。&lt;/p&gt;
&lt;p&gt;参考　&lt;a href="http://faster-than-the-sol.blogspot.com/2020/10/github-listing.html"&gt;Google Serach Console登録方法&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>