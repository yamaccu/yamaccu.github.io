var tipuesearch = {"pages":[{"title":"﻿author","text":"ハードウェアエンジニアです。 今まではどっぷりハードウェアの仕事をしておりましたが、 マイコン等へのハード機能の集積化、Raspberry pi / arduinoといった マイコンボードによるハードウェアへの参入障壁の低下に危機感を感じ、 一新してプログラムの勉強をしています。 作りたいアプリがあり、まずはそこを目指して進んでいます。","tags":"pages","url":"https://yamaccu.github.io/blog/pages/profile.html","loc":"https://yamaccu.github.io/blog/pages/profile.html"},{"title":"﻿about blog","text":"個人的な技術メモです。 C#、python、arduino、raspberry piの記事を主に投稿していきます。 記事の内容の正確性は保証されておりませんので、ご承知の上、参照をお願いいたします。 何かありましたらtwitterの方へご連絡ください。 （メニューのtwitterアイコンからアクセスできます。）","tags":"pages","url":"https://yamaccu.github.io/blog/pages/about.html","loc":"https://yamaccu.github.io/blog/pages/about.html"},{"title":"﻿sitepolicy","text":"アクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。 このGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。 このトラフィックデータは匿名で収集されており、個人を特定するものではありません。 この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。 この規約に関して、詳しくは Googleアナリティクス利用規約 、 Googleポリシーと規約 をご覧ください。","tags":"pages","url":"https://yamaccu.github.io/blog/pages/policy.html","loc":"https://yamaccu.github.io/blog/pages/policy.html"},{"title":"UIFLOWでカスタムブロックを作る","text":"M5Stack のビジュアルプログラミング「 UIFLOW 」でカスタムブロックを作成する方法です。 こちらのカスタムブロック作成ページ から作成します。 github に、WAVファイルを再生するためのカスタムブロックをあげています。 ※M5Stack：ESP32マイコンを使用し、wifi/LCD/各種センサなどを一体化させたマイコンボード 手順 Pythonでプログラムを書く setupブロックを作る 自作関数を実行するブロックを作る Pythonでプログラムを書く まずはブロック化したいpythonのプログラムを書きます。 setupブロックを作る 初期設定用(setup)のブロックを作成します。 importやdefなどはこのブロックで実行します。 Name：Blockmaker上だけの識別名なので何でも大丈夫です。 Type：Executeにします。 Parameter：まずブロック名をtype:Labelで設定します。 変数があれば、type:String/Number/Variableで設定します。 BlockCode：作ったプログラムをコピペします。 自作関数を実行するブロックを作る setupブロックで定義した自作関数を実行するブロックを作ります。 基本はsetupブロックと同じです。 defで定義した関数をBlockCodeへ入力します。 変数があればparameterで設定します。 ※parameterで設定した変数をBlockCode内で読み出すには、「${変数}」と書きます。 ex) playwav(${playwav},${volume}) 完成したら 右下のDownloadボタンをおしてDownloadして、UIFLOWのCustomから読み込みます。 参考URL qiita 自作モジュール用のUI Flowのカスタムブロックを作る","tags":"M5Stack","url":"https://yamaccu.github.io/blog/posts/2021/07/uiflow-customblock/","loc":"https://yamaccu.github.io/blog/posts/2021/07/uiflow-customblock/"},{"title":"micropythonにreplでアクセス","text":"micropythonにreplでアクセスする方法です。 repl：「Read（読み取り）、Eval（評価）、Print（印字）、Loop（ループ）」の頭字語。 一つずつコマンドを実行できる仕組みで、コマンドプロンプトのようなイメージ。 アクセス方法 デバイスのシリアルポートに、シリアル通信アプリ（teratermなど）でアクセスします。 通信速度は115200bps。 CTR+Cを二回で、mainで実行している処理を中止してreplで操作可能になります。 コマンド help() ヘルプを表示します。 help('modules') 使用可能なライブラリを表示します。 help(obj) 調べたいobjectの説明を表示します 入力途中にTABキー 入力候補の表示をしてくれます。便利。 例えば、machine. でTabを押すとmachineの配下のクラスが表示されます。 dir() インポート済みのファイルの情報を表示します。 sys.path.append('ディレクトリパス') import時に探索されるパスを追加します。 os.listdir() カレントディレクトリのファイルを表示します。 参考URL micropython公式","tags":"micropython","url":"https://yamaccu.github.io/blog/posts/2021/06/micropython-repl/","loc":"https://yamaccu.github.io/blog/posts/2021/06/micropython-repl/"},{"title":"C#でシリアル通信","text":"C#でシリアル通信する方法です。WPFで作成します。 github にサンプルをあげています。 作成したアプリはこんな感じです。 使用Class SerialPort class を使用します。 NugetでSystem.IO.Portsをインストールする必要があります。 複数ポートを同時に使用しない場合は、staticで使うことが多いようです。 以下、機能の解説です。 機能 メソッド ポート選択 GetPortNames() シリアルポートオープン Open() シリアルポートクローズ Close() データ送信 Write(byte[], int32, int32) / Write(string) データ受信 Read(byte[], int32, int32) / ReadExisting() バッファクリア DiscardInBuffer() 使用ポートの選択 使用可能なポートを取得します。 ※Binding用にReactivePropertyを使用しています。 1 2 3 4 5 6 7 8 9 10 11 12 public ReactiveCollection < string > COMPorts { get ; set ; } = new ReactiveCollection < string >(); public void ScanCOMPorts () { COMPorts . Clear (); string [] ports = SerialPort . GetPortNames (); foreach ( var port in ports ) { COMPorts . Add ( port ); } } ComboBoxにBindingします。 XAML: 1 < ComboBox ItemsSource = \"{Binding COMPorts}\" /> ComboBoxのDropDownOpenedイベントにポート取得のメソッドを登録しておくと、 ドロップダウンを開く度に使用可能ポートをロードしてくれて便利です。 シリアルポートオープン シリアルポート接続を開きます。 Open前に各種設定を行います。 1 2 3 4 5 6 7 8 9 10 serialPort . PortName = port ; //選択したport名 serialPort . BaudRate = baudrate ; //選択したbaudrate serialPort . DataBits = 8 ; serialPort . Parity = Parity . None ; serialPort . StopBits = StopBits . One ; serialPort . WriteTimeout = 1000 ; serialPort . ReadTimeout = 1000 ; serialPort . Encoding = Encoding . UTF8 ; serialPort . Open (); シリアルポートクローズ シリアルポート接続を閉じます。 1 serialPort . Close (); データ送信 byte配列を送信します。 1 2 3 4 5 byte [] sendBytes = { 0 , 1 , 2 , 254 , 255 }; if ( serialPort . IsOpen ) { serialPort . Write ( sendBytes , 0 , sendBytes . Length ); } 文字列を送信します。 1 2 3 4 5 string sendStr = \"01234\" ; if ( serialPort . IsOpen ) { serialPort . Write ( sendStr ); } データ受信 byte配列を受信します。 1 2 byte [] resByte = new byte [ serialPort . BytesToRead ]; serialPort . Read ( resByte , 0 , serialPort . BytesToRead ); 文字列を受信します。 1 2 string resStr ; resStr = serialPort . ReadExisting () 割込みを使って受信します。 データを受信したらすぐにデータを取り込んでくれます。 1 2 3 4 5 6 SerialCom . serialPort . DataReceived += OnReceived ; private void OnReceived ( object sender , SerialDataReceivedEventArgs e ) { resStr += serialPort . ReadExisting (); } バッファクリア バッファにたまっているデータをクリアします。 1 serialPort . DiscardInBuffer (); ご指摘等ありましたら、下記twitterにお願いします。 勉強用に、WPFでシリアル通信アプリを作りました。 組み込み系のプロダクトだと、デバッグ用にシリアル通信まぁまぁ使いますね。 #wpf #Csharp https://t.co/kyVjuQT67q — やまっく (@YY87750722) July 5, 2021","tags":"C#","url":"https://yamaccu.github.io/blog/posts/2021/06/c-serialport/","loc":"https://yamaccu.github.io/blog/posts/2021/06/c-serialport/"},{"title":"Github 初pushまでの設定","text":"githubのレポジトリにプッシュするまでの設定です。 gitをインストール githubにsign up 端末のSSH公開鍵の設定 ローカル環境の設定 レポジトリをクローン 変更＆プッシュ gitをインストール git公式 githubにsign up github 端末のSSH公開鍵の設定 SSH公開鍵の生成 ssh-keygen -t rsa githubのページで、Setting => SSH and GPG keys で生成したSSH鍵を登録 参考HP ローカル環境設定 git config --global user.name \"ユーザー名\" git config --global user.email \"メールアドレス\" ユーザー名、メールアドレスはgithubの登録情報と同じもの。 githubのレポジトリをクローン githubのページでレポジトリ作成して、作成したレポジトリをローカル環境にクローン git clone <URLアドレス> 変更＆プッシュ ファイルの追加、修正をしたら git add <ファイル名> git commit -m \"コメント\" git push (-f) origin main ※-fは強制プッシュなので取り扱い注意 ※originの設定は、クローン時に自動で設定されます。 ※2020/10から、デフォルトブランチがmaster ⇒ main に変わりました。","tags":"github","url":"https://yamaccu.github.io/blog/posts/2021/06/git-setting/","loc":"https://yamaccu.github.io/blog/posts/2021/06/git-setting/"},{"title":"div要素で図形を表示する","text":"HTMLのdiv要素を使って、図形を表示させる方法です。 丸と四角 コードと結果は以下です。 HTML <div class=\"square\"></div> <div class=\"circle\"></div> CSS .square { width: 50px; height: 50px; background: black; } .circle { width: 50px; height: 50px; background: black; border-radius: 50px; } See the Pen KKWyajK by やまっく ( @yy87750722 ) on CodePen . 組み合わせ図形 疑似要素（before / after）を使います。 疑似要素とは、HTMLの要素に対して、CSSで要素を追記できる方法です。 前に要素を追加：before、後に要素を追加：after となります。 これを使えば、作った図形に2つまで図形の追加ができます。（合計3つの図形を一つのDiv内に作れる） サンプルは下記です。 HTML <div class=\"Switch\"></div> CSS .Switch { width: 30px; height: 63px; background: #ccc; position: relative; } .Switch:before { content: ''; position: absolute; width: 18px; height: 48px; left: 6px; top: 6px; background: #fff; } .Switch:after { content: ''; position: absolute; width: 18px; height: 18px; left: 6px; top: 6px; background: #596; } See the Pen oNZEvBQ by やまっく ( @yy87750722 ) on CodePen . 参考URL CSSで作図する いろんなカタチ CSSの疑似要素とは","tags":"HTML","url":"https://yamaccu.github.io/blog/posts/2021/06/html-div-figures/","loc":"https://yamaccu.github.io/blog/posts/2021/06/html-div-figures/"},{"title":"Pelicanのプラグイン","text":"Pelicanのプラグインの解説です。 以下のプラグインが便利かと思います。 related_posts share_post neighbors sitemap tipue_search プラグイン導入方法 pluginsフォルダを作成します。 githubレポジトリ からコピーしてきます。 設定ファイル（pelicanconf.py）で使用するpluginを設定します。 PLUGIN_PATHS = ['plugins'] PLUGINS = ['related_posts', 'share_post', 'neighbors', 'sitemap', 'tipue_search',] related_posts 記事の最後に、関連記事をリストアップして表示してくれます。 同じタグのついた記事を表示する仕様のようです。 share_posts 記事の最後に、SNSのshareボタンを追加してくれます。 ※Flexテーマを使用している場合は、テーマ内のファイル修正が必要です。 こちらのHP が非常にわかりやすいです。 neighbors 記事の最後に、次の記事 / 前の記事 へ移動するボタンを追加してくれます。 sitemap html出力フォルダに、sitemapu.xmlを自動生成してくれます。 tipue_search ブログ内の検索機能の追加です。 メニューに検索ボックスを設定してくれます。 以下の設定を設定ファイル（pelicanconf.py）に追加します。 DIRECT_TEMPLATES = ['index', 'tags', 'categories', 'authors', 'archives', 'search'] 参考HP 公式doc","tags":"pelican","url":"https://yamaccu.github.io/blog/posts/2021/05/pelican-plugins/","loc":"https://yamaccu.github.io/blog/posts/2021/05/pelican-plugins/"},{"title":"ブログを作ったらやること","text":"ブログを作ったら、最初にやることのメモです。 Google Analyticsの登録 sitemapの作成 robots.txtの作成 Google Search Consoleの登録 / sitemapの登録 Google Analyticsの登録 HPへのアクセス状況が確認できるようになります。 登録が完了したら、トラッキングIDをHTMLに追記する必要があります。 pelicanでは、publishconf.pyにトラッキングIDを追加すると自動でやってくれます。 Google Analytics登録方法 sitemapの作成 Google検索にヒットさせ易くするためのファイルで、作成したらGoogle Search Consoleに登録します。 小規模HPには不要のようですが、一応作成します。 サイトマップは、pelicanのプラグイン「sitemap」で自動生成できます。 pelicanconf.pyに以下の設定を追加すると、出力フォルダに「sitemap.xml」が生成されます。 PLUGINS = ['sitemap',] SITEMAP = {'format': 'xml'} robots.txtの作成 sitemapへのリンクファイルです。 rootディレクトリに、「robots.txt」という名前のファイルを作成して、中身を以下のように記述します。 User-agent: * Disallow: Sitemap: https://xxxxxxxxx/sitemap.xml Google Search Consoleの登録 / sitemapの登録 HPへの流入ルート、検索順位などSEO関連情報が確認できます。 登録完了したら、サイトマップも登録します。 登録したては「サイトマップを読み込めませんでした」とエラーが出ますが、しばらく放置しておくと読み込んでくれるようです。 ⇒ 3週間後に確認したら、読み込んでいました。 Google Serach Console登録方法 参考URL Google Analyticsについて sitemapについて robots.txtについて Google Search Consoleについて","tags":"blog","url":"https://yamaccu.github.io/blog/posts/2021/05/blog-setting/","loc":"https://yamaccu.github.io/blog/posts/2021/05/blog-setting/"},{"title":"Pelicanの設定","text":"この記事では、Python製の静的サイトジェネレータ「pelican」の設定ファイルについて解説します。 設定ファイルは2つあります。 pelicanconf.py publishconf.py 手元の環境で動作確認をする際は「pelicanconf.py」を使用します。 本番環境へデプロイする際も基本的に「pelicanconf.py」を使用しますが、 本番環境用に設定したい項目は「publishconf.py」に記述して、「pelicanfong.py」の設定に上書き設定するイメージです。 設定項目 Basic Setting PATH = 'content' pelicanコマンドの対象ディレクトリを指定します。 これを設定しておくと、コマンドプロンプトで\"pelican\"と打つだけで指定ディレクトリのファイルをHTML化してくれます ARTICLE_PATHS = ['articles'] 書いたブログの記事を格納するディレクトリ名です。 このディレクトリは上記のPATH直下に作成します。 SITEURL = 'http://127.0.0.1:8000' サイトを公開するURLです。 SITENAME = 'xxxxxx' サイト名です。 SUMMARY_MAX_LENGTH = 5 topページで、各記事のサマリーを表示する文字量の設定です。 (数字を変えるとサマリー表示量が変わります。数字と表示量の関係は不明、カット&トライで試してみてください。) PYGMENTS_RST_OPTIONS = { 'linenos': 'table', } コードブロック でデフォルトで使う強調構文を指定します。 'linenos': 'table'は行番号を表示するオプションです。 PLUGIN_PATHS = ['plugins'] プラグインを保存するディレクトリ名です。 PLUGINS = ['related_posts', 'share_post', 'neighbors'] 使用するプラグインの指定です。 RELATED_POSTS_MAX = 5 プラグイン「related_posts」の設定で、関連記事の表示数です。 URL Settings ARTICLE_URL = 'posts/{date:%Y}/{date:%m}/{slug}/' ARTICLE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/{slug}/index.html' YEAR_ARCHIVE_URL = 'posts/{date:%Y}/' YEAR_ARCHIVE_SAVE_AS = 'posts/{date:%Y}/index.html' MONTH_ARCHIVE_URL = 'posts/{date:%Y}/{date:%m}/' MONTH_ARCHIVE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/index.html' URLの指定です。 上記のように、URLにメタデータを含めることができます。 page、Categoryなどの固定ページも設定すればデフォルトURLから変更ができます。 SLUGIFY_SOURCE = 'basename' メタファイル{slug}の値の引用先を設定します。 title：ファイルのタイトル、basename：ファイル内のslugタグ ファイルタイトルから引用した場合、漢字をタイトルとしていると中国語読みがslugに設定されます。 Time and Date TIMEZONE = 'Asia/Tokyo' タイムゾーンの設定です。 DEFAULT_DATE='fs' デフォルト時間の設定です。 記事のファイル内でメタデータ{Date}を指定しなかった場合、ここの設定が反映されます。 'fs'とするとファイルシステムのタイムスタンプを使用します。 DEFAULT_DATE_FORMAT = '%Y/%m/%d' 投稿した記事の日付フォーマットの設定です。 META DATA AUTHOR = 'xxxx' 記事の著者の設定です。 Feed Settings FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None AUTHOR_FEED_ATOM = None AUTHOR_FEED_RSS = None Feedを使うときの設定です。 使わなければすべてNoneとします。 Translations DEFAULT_LANG = 'Japanese' ページの言語設定です。 Theme THEME = 'themes/Flex' pelicanのテーマを導入する場合、ここでディレクトリを指定します。 テーマの設定は下記を参考に。 https://www.sairablog.com/article/python-pelican-blog-theme-howto.html SITESUBTITLE = \"xxxxxxx\" サイトのサブタイトルです。 MENUITEMS = ( (\"Archives\", \"/archives.html\"), (\"Categories\", \"/categories.html\"), ) 使用するMenuの項目です。 サイト上部にリンクとして表示されます。 CategoryやTagをメタデータとして設定しておくと、Menuで一覧をみることができます。 SOCIAL = (('twitter', 'https://twitter.com/xxxxxxxx'), (\"github\", \"https://github.com/xxxxxx\")) SNSのリンク設定です。 アイコンとリンクを自動生成してくれます。 Pagination DEFAULT_PAGINATION = 10 一度に表示する記事数の設定です。 Flexテーマの設定 MAIN_MENU = True 上部のMenuの表示・非表示設定です。 SITELOGO = SITEURL+\"/images/profile.png\" サイトに表示するロゴの指定です。 FAVICON = \"/images/favicon.ico\" ブラウザのタブ部に表示するロゴの指定です。 PYGMENTS_STYLE = \"monokai\" コードブロックのスタイルの指定です。 参考 https://help.farbox.com/pygments.html DISABLE_URL_HASH = True 記事内のアンカーの有効・無効設定です。Trueは無効。 CC_LICENSE = { \"name\": \"Creative Commons Attribution-ShareAlike 4.0 International License\", \"version\": \"4.0\", \"slug\": \"by-sa\", } COPYRIGHT_YEAR = datetime.now().year ページ下部のライセンス表示の設定です。 USE_LESS = True CSSファイルの代わりにLESSファイルを使用するかどうかの設定です。 publish.confの記述 publishconf.pyの中に \"from pelicanconf import *\" と記述することで、pelicanconf.pyの設定をpublishでも使用できます。 以下は、追加で設定した方が良いであろうものです。 SITEURL = 'https://xxxxxx' MENUITEMS = ( (\"Archives\", \"xxxxxx\"), (\"Categories\", \"xxxxxx\"), ) SITELOGO = \"/blog/images/profile.png\" FAVICON = \"/images/favicon.ico\" URL設定系は手元の環境と本番環境で異なると思うので、publish.conf内で設定する必要があるかと思います。 GOOGLE_ANALYTICS = \"xxxxxxxx\" Google Analyticsのトラッキングコードの設定ができます。 GOOGLE_ADSENSE = { 'ca_id': 'ca-pub-xxxxxxxx', # Your AdSense ID 'page_level_ads': True, # Allow Page Level Ads (mobile) 'ads': { 'aside': 'xxx', # Side bar banner (all pages) 'main_menu': 'xxx', # Banner before main menu (all pages) 'index_top': 'xxx', # Banner after main menu (index only) 'index_bottom': 'xxx', # Banner before footer (index only) 'article_top': 'xxx', # Banner after article title (article only) 'article_bottom': 'xxx', # Banner after article content (article only) } google adsensの設定ができます。 参考URL pelican公式 FLEX公式","tags":"pelican","url":"https://yamaccu.github.io/blog/posts/2021/05/pelican-setting/","loc":"https://yamaccu.github.io/blog/posts/2021/05/pelican-setting/"},{"title":"python 仮想環境の作り方","text":"Pythonでプログラミングを行う際には、作るプログラムごとに仮想環境を構築します。 理由は、 仮想環境ごとに必要なパッケージのバージョンをインストールできます。 パッケージが複数のプログラムへ影響を与えるなどの、各プログラム間の干渉を回避できます。 仮想環境の作成にはいくつか方法がありますが、ここではpipenvを使用します。 仮想環境の作成手順 コマンドプロンプトを使います。 1. pipenvをインストール pip install pipenv 2. 作業ディレクトリを作成 3. 作業ディレクトリに移動して必要なパッケージをインストール （pipfileという設定ファイルが作成され、ここに仮想環境の情報が入る。） pipenv install xxxxxx 4. 仮想環境を実行 pipenv shell 5. 仮想環境を終了 exit 6. 仮想環境に入らずにコマンド実行 pipenv run xxxxxx 参考HP 公式","tags":"python","url":"https://yamaccu.github.io/blog/posts/2021/05/virtual-env-for-python/","loc":"https://yamaccu.github.io/blog/posts/2021/05/virtual-env-for-python/"}]};