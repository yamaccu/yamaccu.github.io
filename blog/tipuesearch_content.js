var tipuesearch = {"pages":[{"title":"﻿author","text":"ハードウェアエンジニアです。 今まではどっぷりハードウェアの仕事をしておりましたが、 マイコン等へのハード機能の集積化、Raspberry pi / arduinoといった マイコンボードによるハードウェアへの参入障壁の低下に危機感を感じ、 一新してプログラムの勉強をしています。 作りたいアプリがあり、まずはそこを目指して進んでいます。","tags":"pages","url":"https://yamaccu.github.io/blog/pages/profile.html","loc":"https://yamaccu.github.io/blog/pages/profile.html"},{"title":"﻿about blog","text":"個人的な技術メモです。 C#、python、arduino、raspberry piの記事を主に投稿していきます。 記事の内容の正確性は保証されておりませんので、ご承知の上、参照をお願いいたします。 何かありましたらtwitterの方へご連絡ください。 （メニューのtwitterアイコンからアクセスできます。）","tags":"pages","url":"https://yamaccu.github.io/blog/pages/about.html","loc":"https://yamaccu.github.io/blog/pages/about.html"},{"title":"﻿sitepolicy","text":"アクセス解析ツールについて 当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しています。 このGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。 このトラフィックデータは匿名で収集されており、個人を特定するものではありません。 この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。 この規約に関して、詳しくは Googleアナリティクス利用規約 、 Googleポリシーと規約 をご覧ください。","tags":"pages","url":"https://yamaccu.github.io/blog/pages/policy.html","loc":"https://yamaccu.github.io/blog/pages/policy.html"},{"title":"Pelicanのプラグイン","text":"Pelicanのプラグインの解説です。 以下のプラグインが便利かと思います。 related_posts share_post neighbors sitemap tipue_search 導入方法 pluginsフォルダを作成します。 githubからコピーしてきます。 レポジトリ 設定ファイル（pelicanconf.py）で使用するpluginを設定します。 PLUGIN_PATHS = ['plugins'] PLUGINS = ['related_posts', 'share_post', 'neighbors', 'sitemap', 'tipue_search',] related_posts 記事の最後に、関連記事をリストアップして表示してくれます。 share_posts 記事の最後に、SNSのshareボタンを追加してくれます。 ※Flexテーマを使用している場合は、テーマ内のファイル修正が必要です。 こちらのHP が非常にわかりやすいです。 neighbors 記事の最後に、次の記事 / 前の記事 へ移動するボタンを追加してくれます。 sitemap html出力フォルダに、sitemapu.xmlを自動生成してくれます。 tipue_search ブログ内の検索機能の追加です。 メニューに検索ボックスを設定してくれます。 参考HP 公式doc","tags":"pelican","url":"https://yamaccu.github.io/blog/posts/2021/05/pelican-plugins/","loc":"https://yamaccu.github.io/blog/posts/2021/05/pelican-plugins/"},{"title":"ブログを作ったらやること","text":"ブログを作ったら、最初にやることのメモです。 Google Analyticsの登録 sitemapの作成 robots.txtの作成 Google Search Consoleの登録 / sitemapの登録 Google Analyticsの登録 アクセス解析ツールのGoogle Analyticsに登録します。アクセス状況の確認に必須です。 登録したらトラッキングIDをHTMLに追記します。 pelicanでは、publishconf.pyにトラッキングIDを追加すると自動でやってくれます。 GOOGLE_ANALYTICS = \"xxxxxxxxxxxx\" Google Analytics登録方法 sitemapの作成 Google検索にヒットさせ易くするためのファイルで、作成したらGoogle Search Consoleに登録します。 小規模HPには不要のようですが、一応作成します。 サイトマップは、pelicanのプラグイン「sitemap」で自動生成できます。 pelicanconf.pyに以下の設定を追加すると、出力フォルダに「sitemap.xml」が生成されます。 PLUGINS = ['sitemap',] SITEMAP = {'format': 'xml'} ※pelican以外の場合 一般的な静的サイトジェネレータにはsitemap生成のプラグインがあるようですので、他のジェネレータ使用時はそちらを使用します。 また、sitemap生成の無料ページもあるようです。 robots.txtの作成 sitemapへのリンクファイルです。 rootディレクトリに、「robots.txt」という名前のファイルを作成して、中身を以下のように記述します。 User-agent: * Disallow: Sitemap: https://xxxxxxxxx/sitemap.xml Google Search Consoleの登録 / sitemapの登録 Google Search Consoleに登録します。HPへの流入ルート、検索順位などSEO関連情報がわかります。 登録完了したら、サイトマップも登録しておきます。 登録したては「サイトマップを読み込めませんでした」とエラーが出ますが、しばらく放置しておくと読み込んでくれるようです。 Google Serach Console登録方法 参考URL Google Analyticsについて sitemapについて robots.txtについて Google Search Consoleについて","tags":"blog","url":"https://yamaccu.github.io/blog/posts/2021/05/blog-setting/","loc":"https://yamaccu.github.io/blog/posts/2021/05/blog-setting/"},{"title":"Pelicanの設定","text":"この記事では、Python製の静的サイトジェネレータ「pelican」の設定ファイルについて解説します。 設定ファイルは2つあります。 pelicanconf.py publishconf.py 手元の環境で動作確認をする際は「pelicanconf.py」を使用します。 本番環境へデプロイする際も基本的に「pelicanconf.py」を使用しますが、 本番環境用に設定したい項目は「publishconf.py」に記述して、「pelicanfong.py」の設定に上書き設定するイメージです。 設定項目 Basic Setting PATH = 'content' pelicanコマンドで実行されるディレクトリを指定します。 これを設定しておくと、コマンドプロンプトで\"pelican\"と打つだけで指定ディレクトリのファイルをHTML化を実行してくれます ARTICLE_PATHS = ['articles'] 書いたブログの記事を格納するディレクトリ名です。 このディレクトリは上記のPATH直下に作成します。 SITEURL = ' http://127.0.0.1:8000 ' サイトを公開するURLです。 SITENAME = 'xxxxxx' サイト名です。 SUMMARY_MAX_LENGTH = 5 topページで、各記事のサマリーを表示する文字量の設定です。 (数字を変えるとサマリー表示量が変わります。数字と表示量の関係は不明、カット&トライで試してみてください。) PYGMENTS_RST_OPTIONS = { 'linenos': 'table', } コードブロックでデフォルトで使う強調構文を指定します。 'linenos': 'table'は行番号を表示するオプションです。 これらはコードブロックごとに設定も可能です。 例） 1 2 3 print ( \"print 1\" ) print ( \"print 2\" ) print ( \"print 3\" ) PLUGIN_PATHS = ['plugins'] プラグインを保存するディレクトリ名です。 PLUGINS = ['related_posts', 'share_post', 'neighbors'] 使用するプラグインの指定です。 RELATED_POSTS_MAX = 5 プラグイン「related_posts」の設定で、関連記事の表示数です。 URL Settings ARTICLE_URL = 'posts/{date:%Y}/{date:%m}/{slug}/' ARTICLE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/{slug}/index.html' YEAR_ARCHIVE_URL = 'posts/{date:%Y}/' YEAR_ARCHIVE_SAVE_AS = 'posts/{date:%Y}/index.html' MONTH_ARCHIVE_URL = 'posts/{date:%Y}/{date:%m}/' MONTH_ARCHIVE_SAVE_AS = 'posts/{date:%Y}/{date:%m}/index.html' URLの指定です。 上記のように、URLにメタデータを含めることができます。 page、Categoryなどの固定ページも設定すればデフォルトURLから変更ができます。 SLUGIFY_SOURCE = 'basename' メタファイル{slug}の値の引用先を設定します。 title：ファイルのタイトル、basename：ファイル内のslugタグ ファイルタイトルから引用した場合、漢字をタイトルとしていると中国語読みがslugに設定されます。 Time and Date TIMEZONE = 'Asia/Tokyo' タイムゾーンの設定です。 DEFAULT_DATE='fs' デフォルト時間の設定です。 記事のファイル内でメタデータ{Date}を指定しなかった場合、ここの設定が反映されます。 'fs'とするとファイルシステムのタイムスタンプを使用します。 DEFAULT_DATE_FORMAT = '%Y/%m/%d' 投稿した記事の日付フォーマットの設定です。 META DATA AUTHOR = 'xxxx' 記事の著者の設定です。 Feed Settings FEED_ALL_ATOM = None CATEGORY_FEED_ATOM = None TRANSLATION_FEED_ATOM = None AUTHOR_FEED_ATOM = None AUTHOR_FEED_RSS = None Feedを使うときの設定です。 使わなければすべてNoneとします。 Translations DEFAULT_LANG = 'Japanese' ページの言語設定です。 Theme THEME = 'themes/Flex' pelicanのテーマを導入する場合、ここでディレクトリを指定します。 テーマの設定は下記を参考に。 https://www.sairablog.com/article/python-pelican-blog-theme-howto.html SITESUBTITLE = \"xxxxxxx\" サイトのサブタイトルです。 MENUITEMS = ( (\"Archives\", \"/archives.html\"), (\"Categories\", \"/categories.html\"), ) 使用するMenuの項目です。 サイト上部にリンクとして表示されます。 CategoryやTagをメタデータとして設定しておくと、Menuで一覧をみることができます。 SOCIAL = (('twitter', ' https://twitter.com/xxxxxxxx '), (\"github\", \" https://github.com/xxxxxx \")) SNSのリンク設定です。 アイコンとリンクを自動生成してくれます。 Pagination DEFAULT_PAGINATION = 10 一度に表示する記事数の設定です。 Flexテーマの設定 MAIN_MENU = True 上部のMenuの表示・非表示設定です。 SITELOGO = SITEURL+\"/images/profile.png\" サイトに表示するロゴの指定です。 FAVICON = \"/images/favicon.ico\" ブラウザのタブ部に表示するロゴの指定です。 PYGMENTS_STYLE = \"monokai\" コードブロックのスタイルの指定です。 参考 https://help.farbox.com/pygments.html DISABLE_URL_HASH = True 記事内のアンカーの有効・無効設定です。Trueは無効。 CC_LICENSE = { \"name\": \"Creative Commons Attribution-ShareAlike 4.0 International License\", \"version\": \"4.0\", \"slug\": \"by-sa\", } COPYRIGHT_YEAR = datetime.now().year ページ下部のライセンス表示の設定です。 USE_LESS = True CSSファイルの代わりにLESSファイルを使用するかどうかの設定です。 publish.confの記述 publishconf.pyの中に \"from pelicanconf import *\" と記述することで、pelicanconf.pyの設定をpublishでも使用できます。 以下は、追加で設定した方が良いであろうものです。 SITEURL = ' https://xxxxxx ' MENUITEMS = ( (\"Archives\", \"xxxxxx\"), (\"Categories\", \"xxxxxx\"), ) SITELOGO = \"/blog/images/profile.png\" FAVICON = \"/images/favicon.ico\" RL設定系は手元の環境と本番環境で異なると思うので、publish.conf内で設定する必要があるかと思います。 GOOGLE_ANALYTICS = \"xxxxxxxx\" Google Analyticsのトラッキングコードの設定ができます。 参考URL pelican公式 FLEX公式","tags":"pelican","url":"https://yamaccu.github.io/blog/posts/2021/05/pelican-setting/","loc":"https://yamaccu.github.io/blog/posts/2021/05/pelican-setting/"},{"title":"python 仮想環境の作り方","text":"Pythonでプログラミングを行う際には、作るプログラムごとに仮想環境を構築します。 理由は、 仮想環境ごとに必要なパッケージのバージョンをインストールできます。 パッケージが複数のプログラムへ影響を与えるなどの、各プログラム間の干渉を回避できます。 仮想環境の作成にはいくつか方法がありますが、ここではpipenvを使用します。 仮想環境の作成手順 コマンドプロンプトを使います。 pipenvをインストール pip install pipenv 作業ディレクトリを作成 作業ディレクトリに移動して必要なパッケージをインストール pipenv install xxxxxx ※pipfileという設定ファイルが作成され、ここに仮想環境の情報が入る。 仮想環境を実行 pipenv shell 仮想環境を終了 exit 仮想環境に入らずにコマンド実行 pipenv run xxxxxx 参考HP 公式 わかりやすい手順","tags":"python","url":"https://yamaccu.github.io/blog/posts/2021/05/virtual-env-for-python/","loc":"https://yamaccu.github.io/blog/posts/2021/05/virtual-env-for-python/"}]};